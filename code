library(Hmisc)

train<-read.csv("C:/Users/ddisha/Pictures/titanic/train.csv")
test<-read.csv("C:/Users/ddisha/Pictures/titanic/test.csv")

#exploring data
str(train)
str(test)

hist.data.frame(train)

#check for missing values
names(train)[!!colSums(is.na(train))]
sum(is.na(train$Age)==TRUE)

#impute missing values
train$Age
med<-median(train$Age, na.rm=TRUE)
train$Age[is.na(train$Age)==TRUE] <- med
sum(is.na(train$Age)==TRUE)

# Passengers that survived vs passengers that passed away
x<-table(train$Survived)
y<-prop.table(x)
pie(y)

# Males & females that survived vs males & females that passed away
table(train$Sex,train$Survived)
prop.table(table(train$Sex,train$Survived),1)

#new column-child
train$Child[is.na(train$Age)==TRUE]<-NA
train$Child[train$Age<18]<-1
train$Child[train$Age>=18]<-0
train$Child

prop.table(table(train$Child,train$Survived),1)

#prediction based on gender
test_one <- cbind(test, test$Survived)
test$Survived[test$Sex=="female"] <- 1
test$Survived[test$Sex=="male"] <- 0
head(test_one)

#decision trees
library(rpart)
my_tree<- rpart(Survived ~ Sex + Age,  data=train, method="class")

# Build the decision tree
my_tree_two <- rpart(Survived ~ Pclass+ Sex + Age+SibSp+Parch+Fare+Embarked,  data=train, method="class")

# Visualize the decision tree using plot() and text()
plot(my_tree_two)
text(my_tree_two)

# Load in the packages to create a fancified version of your tree
library(rattle)
library(rpart.plot)
library(RColorBrewer)

# Time to plot your fancified tree
fancyRpartPlot(my_tree_two)

# Make your prediction using the test set
my_prediction <- predict(my_tree_two, test,type="class")

# Create a data frame with two columns: PassengerId & Survived. Survived contains your predictions
my_solution <- data.frame(PassengerId = test$PassengerId, Survived = my_prediction)

# Check that your data frame has 418 entries
nrow(my_solution)

# Write your solution to a csv file with the name my_solution.csv
write.csv(my_solution, file = "my_solution.csv", row.names = FALSE)

#setting cp and minsplit
my_tree_three <- rpart(Survived ~ Pclass+ Sex + Age+SibSp+Parch+Fare+Embarked,  data=train, method="class", control=rpart.control(minsplit=50,cp=0))
plot(my_tree_three)
text(my_tree_three)

# Visualize your new decision tree
fancyRpartPlot(my_tree_three)

########################################################################################################################################

#Look at gender patterns
summary(train$Sex)
prop.table(table(train$Sex, train$Survived))
prop.table(table(train$Sex, train$Survived), 1)

# Create new column in test set with our prediction that everyone dies
test$Survived <- 0
# Update the prediction to say that all females will survive
test$Survived[test$Sex == 'female'] <- 1

# Create submission dataframe and output to file
submit <- data.frame(PassengerId = test$PassengerId, Survived = test$Survived)
write.csv(submit, file = "gendermodel.csv", row.names = FALSE)

# Look at age patterns
summary(train$Age)
train$Child <- 0
train$Child[train$Age < 18] <- 1
aggregate(Survived ~ Child + Sex, data=train, FUN=sum)
aggregate(Survived ~ Child + Sex, data=train, FUN=length)
aggregate(Survived ~ Child + Sex, data=train, FUN=function(x) {sum(x)/length(x)})

# Look at class and fare patterns
train$Fare2 <- '30+'
train$Fare2[train$Fare < 30 & train$Fare >= 20] <- '20-30'
train$Fare2[train$Fare < 20 & train$Fare >= 10] <- '10-20'
train$Fare2[train$Fare < 10] <- '<10'
aggregate(Survived ~ Fare2 + Pclass + Sex, data=train, FUN=function(x) {sum(x)/length(x)})

# Create new column in test set with our prediction that everyone dies
test$Survived <- 0
# Update the prediction to say that all females will survive
test$Survived[test$Sex == 'female'] <- 1
# Update once more to say that females who pay more for a third class fare also perish
test$Survived[test$Sex == 'female' & test$Pclass == 3 & test$Fare >= 20] <- 0

# Create submission dataframe and output to file
submit <- data.frame(PassengerId = test$PassengerId, Survived = test$Survived)
write.csv(submit, file = "genderclassmodel.csv", row.names = FALSE)

########################################################################################################################################
library(rattle)
library(rpart.plot)
library(RColorBrewer)

# Recreate the gender model
fit <- rpart(Survived ~ Sex, data=train, method="class")
fancyRpartPlot(fit)

# Build a deeper tree
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data=train, method="class")
# Plot it with base-R
plot(fit)
text(fit)
# And then make it look better with fancyRpartPlot!
fancyRpartPlot(fit)

# Now let's make a prediction and write a submission file
Prediction <- predict(fit, test, type = "class")
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(submit, file = "myfirstdtree.csv", row.names = FALSE)

# Let's unleash the decision tree and let it grow to the max
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data=train,
             method="class", control=rpart.control(minsplit=2, cp=0))
fancyRpartPlot(fit)

# Now let's make a prediction and write a submission file
Prediction <- predict(fit, test, type = "class")
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(submit, file = "myfullgrowntree.csv", row.names = FALSE)

# Manually trim a decision tree
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data=train,
             method="class", control=rpart.control(minsplit=2, cp=0.005))
new.fit <- prp(fit,snip=TRUE)$obj
fancyRpartPlot(new.fit)

#####################################################################################################################################

